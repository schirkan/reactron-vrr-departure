{"version":3,"file":"bundle.server.js","sources":["../src/server/services/PublicTransportService.ts","../src/server/index.ts"],"sourcesContent":["import { IReactronServiceContext } from '@schirkan/reactron-interfaces';\r\nimport * as request from 'request-promise-native';\r\nimport { IPublicTransportServiceOptions } from 'src/common/interfaces/IPublicTransportServiceOptions';\r\nimport { IPublicTransportService } from 'src/common/interfaces/IPublicTransportService';\r\nimport { IDepartureResponse } from 'src/common/interfaces/IDepartureResponse';\r\n\r\nconst baseUrl = 'http://api.openweathermap.org/data/2.5/'; // TODO\r\n\r\ninterface ICacheItem {\r\n  timestamp: number;\r\n  result: Promise<any>;\r\n}\r\n\r\nexport class PublicTransportService implements IPublicTransportService {\r\n  private options: IPublicTransportServiceOptions;\r\n  private cache: { [url: string]: ICacheItem } = {};\r\n\r\n  constructor(private context: IReactronServiceContext) { }\r\n\r\n  public async setOptions(options: IPublicTransportServiceOptions): Promise<void> {\r\n    this.options = options;\r\n  }\r\n\r\n  public async getOptions(): Promise<Readonly<IPublicTransportServiceOptions>> {\r\n    return this.options;\r\n  }\r\n\r\n  public async getDepartures(station: string): Promise<IDepartureResponse> {\r\n    const url = this.getApiUrl(station);\r\n    return this.getResponse(url, PublicTransportService.mapToDepartureResponse);\r\n  }\r\n\r\n  private getApiUrl(station: string): string {\r\n    let url = baseUrl + '?APPID=' + station; // TODO\r\n    return url;\r\n  }\r\n\r\n  private async getResponse<TResponse>(url: string, mapper: (response: any) => TResponse): Promise<TResponse> {\r\n    const now = Date.now();\r\n    const validCacheTime = now - (this.options.cacheDuration * 60 * 1000);\r\n\r\n    // check timestamp\r\n    if (this.cache[url] && this.cache[url].timestamp < validCacheTime) {\r\n      delete (this.cache[url]);\r\n    }\r\n\r\n    if (!this.cache[url]) {\r\n      this.cache[url] = {\r\n        timestamp: now,\r\n        result: this.getResponseInternal(url, mapper)\r\n      };\r\n    } else {\r\n      this.context.log.debug('cache hit');\r\n    }\r\n\r\n    return this.cache[url].result;\r\n  }\r\n\r\n  private async getResponseInternal<TResponse>(url: string, mapper: (response: any) => TResponse): Promise<TResponse> {\r\n    this.context.log.debug('fetch', url);\r\n    const response = await request.get(url, { json: true, resolveWithFullResponse: true }) as request.FullResponse;\r\n    if (response.statusCode !== 200) {\r\n      this.context.log.error(response.statusMessage, response.body);\r\n      throw new Error(response.statusMessage);\r\n    }\r\n    return mapper(response.body);\r\n  }\r\n\r\n  private static mapToDepartureResponse(response: any): IDepartureResponse {\r\n    const result: IDepartureResponse = response\r\n    // TODO\r\n    return result;\r\n  }\r\n}","import { IReactronServiceDefinition } from '@schirkan/reactron-interfaces';\r\nimport { PublicTransportService } from './services/PublicTransportService';\r\n\r\n// export interfaces\r\nexport * from '../common/interfaces/IDepartureResponse';\r\nexport * from '../common/interfaces/IPublicTransportService';\r\nexport * from '../common/interfaces/IPublicTransportServiceOptions';\r\n\r\n// export reactron service definition\r\nexport const services: IReactronServiceDefinition[] = [{\r\n  description: 'Service forpPublic transport in germany',\r\n  displayName: 'Public transport information service',\r\n  fields: [{\r\n    defaultValue: 15,\r\n    description: 'Cache duration in minutes',\r\n    displayName: 'Cache duration (min)',\r\n    name: 'cacheDuration',\r\n    valueType: 'number',\r\n    minValue: 5,\r\n    maxValue: 120,\r\n    stepSize: 5\r\n  }],\r\n  name: 'PublicTransportService',\r\n  service: PublicTransportService\r\n}];"],"names":["request.get"],"mappings":"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"}